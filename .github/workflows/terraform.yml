name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init -backend=false

    - name: Terraform Format
      run: terraform fmt -check

    - uses: actions/setup-python@v2

    - name: Install terraform-docs
      run: |
        # Get the download url of the latest version of terraform-docs
        tf_docs_download_url=$(curl -s https://api.github.com/repos/terraform-docs/terraform-docs/releases/latest | jq -rc '.assets[] | select( .name | contains("linux-amd64")).browser_download_url')
        mkdir -p $GITHUB_WORKSPACE/bin
        curl -Lo $GITHUB_WORKSPACE/bin/terraform-docs $tf_docs_download_url
        chmod +x $GITHUB_WORKSPACE/bin/terraform-docs
        echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH

    - name: Check Docs
      uses: pre-commit/action@v2.0.0
      with:
        extra_args: --show-diff-on-failure --all-files terraform_docs

    - name: Terraform Validate
      run: terraform validate

    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v2
      with:
        branches: |
          [
            'main'
          ]
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: github.ref == 'refs/heads/main'

    - name: 'slack:success'
      if: success()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        channel: ${{ secrets.SLACK_CHANNEL }}
        status: SUCCESS
        color: good

    - name: 'slack:failure'
      if: failure()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        channel: ${{ secrets.SLACK_CHANNEL }}
        status: failure
        color: danger
